# Import libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
# Load data
url = "https://raw.githubusercontent.com/IBM/telco-customer-churn-on-icp4d/master/data/Telco-Customer-Churn.csv"
data = pd.read_csv(url)
# Drop customerID as it's not a useful feature
data.drop("customerID", axis=1, inplace=True)
# Convert TotalCharges to numeric, coerce errors to NaN, and drop missing values
data["TotalCharges"] = pd.to_numeric(data["TotalCharges"], errors="coerce")
data.dropna(inplace=True)
# Encode categorical columns
for column in data.select_dtypes(include="object").columns:
    if column != "Churn":
        data[column] = LabelEncoder().fit_transform(data[column])
# Encode the target variable
data["Churn"] = data["Churn"].map({"Yes": 1, "No": 0})
# Split features and target
X = data.drop("Churn", axis=1)
y = data["Churn"]
# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
# Train Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)
# Predict
y_pred = model.predict(X_test)
# Evaluation
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test,
