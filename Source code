# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load customer churn dataset
def load_data(file_path):
    try:
        data = pd.read_csv(file_path)
        return data
    except Exception as e:
        print(f"Error loading data: {str(e)}")

# Preprocess data
def preprocess_data(data):
    try:
        # Handle missing values
        data.fillna(data.mean(), inplace=True)
        
        # Encode categorical variables
        categorical_cols = data.select_dtypes(include=['object']).columns
        data[categorical_cols] = data[categorical_cols].apply(lambda x: pd.factorize(x)[0])
        
        # Split data into features (X) and target (y)
        X = data.drop('churn', axis=1)
        y = data['churn']
        
        return X, y
    except Exception as e:
        print(f"Error preprocessing data: {str(e)}")

# Train machine learning model
def train_model(X_train, y_train):
    try:
        # Train a random forest classifier
        model = RandomForestClassifier(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        return model
    except Exception as e:
        print(f"Error training model: {str(e)}")

# Evaluate model performance
def evaluate_model(model, X_test, y_test):
    try:
        # Make predictions on the test set
        y_pred = model.predict(X_test)
        
        # Evaluate model performance
        accuracy = accuracy_score(y_test, y_pred)
        report = classification_report(y_test, y_pred)
        matrix = confusion_matrix(y_test, y_pred)
        
        return accuracy, report, matrix
    except Exception as e:
        print(f"Error evaluating model: {str(e)}")

# Main function
def main():
    # Load data
    data = load_data('customer_churn.csv')
    
    # Preprocess data
    X, y = preprocess_data(data)
    
    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Train model
    model = train_model(X_train, y_train)
    
    # Evaluate model
    accuracy, report, matrix = evaluate_model(model, X_test, y_test)
    
    # Print results
    print(f"Model Accuracy: {accuracy:.3f}")
    print("Classification Report:")
    print(report)
    print("Confusion Matrix:")
    print(matrix)

if __name__ == "__main__":
    main()
